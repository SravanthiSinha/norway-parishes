import{dc as e,dd as c,de as n,U as u}from"./index-BLU2cKnj.js";import{a as y}from"./WebMap-2a6lYZBC.js";import"./ColorBackground-vlxJDcwJ.js";import"./CollectionFlattener-BHTr6g-r.js";import"./basemapUtils-Cnyc7wcC.js";import"./TablesMixin-_dK-QRY_.js";import"./MultiOriginJSONSupport-B22y0seo.js";import"./portalItemUtils-DqkYNLL5.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-Di_akmN3.js";import"./jsonContext-D5HJfx3y.js";import"./project-w0kwP63j.js";import"./FeatureLayer-DdpxwJmY.js";import"./commonProperties-KlFzDeB4.js";import"./FeatureLayerBase-BJZBLv_H.js";import"./HeightModelInfo-DW8MpWGE.js";import"./featureLayerUtils-BsLCONIT.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-BcuBJJSt.js";import"./Relationship-CX2qdSyH.js";import"./serviceCapabilitiesUtils-CB6oyZ7v.js";import"./editsZScale-JWIYr7bJ.js";import"./APIKeyMixin-yhjwDbKM.js";import"./ArcGISService-CbHrzmDZ.js";import"./CustomParametersMixin-BAGJWN10.js";import"./EditBusLayer-DC3AKpDw.js";import"./FeatureEffectLayer-BL9piFxL.js";import"./FeatureEffect-BMryXxKD.js";import"./FeatureReductionLayer-DEu0idqa.js";import"./FeatureReductionSelection-BzWRnAdM.js";import"./labelingInfo-DUaCGGmS.js";import"./labelUtils-D-Vz6XUw.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-Dim73_Xu.js";import"./OrderedLayer-DHZ3ySKT.js";import"./OrderByInfo-CPOGsgxp.js";import"./PortalLayer-COUJoiul.js";import"./RefreshableLayer-CAMgn8FC.js";import"./TemporalLayer-B5SR_zri.js";import"./FeatureTemplate-ByfxlPMU.js";import"./FeatureType-DL8Q85H-.js";import"./fieldProperties-4Y42RhjV.js";import"./versionUtils-DaWIDler.js";import"./styleUtils-DNZ0ENBd.js";import"./popupUtils-w3qsOQ3p.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-B_tvzuuI.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Dx3Aj7wt.js.map
