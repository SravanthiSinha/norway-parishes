import{w as s,I as m,b5 as p}from"./index-D2fbPmv2.js";import{p as n}from"./MeshVertexAttributes-DUfgEic7.js";import{B as a}from"./vertexSpaceConversion-Cv5gEIZM.js";import"./mat3-CrHuGM2_.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-wKfHB3TO.js";import"./spatialReferenceEllipsoidUtils-MKxqvfid.js";import"./computeTranslationToOriginAndRotation-Bz1fa-AB.js";import"./projectPointToVector-AEutsyFW.js";import"./meshVertexSpaceUtils-CCZ2kj4M.js";import"./MeshLocalVertexSpace-DwlLUecc.js";import"./vec3-DECf-4Ts.js";import"./BufferView-DMAu5AO2.js";import"./vec4-D4ERPKxJ.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-BQNMeGsB.js.map
