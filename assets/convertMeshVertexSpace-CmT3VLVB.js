import{w as s,I as m,b5 as p}from"./index-Du44_A8J.js";import{p as n}from"./MeshVertexAttributes--Q4mMqgh.js";import{B as a}from"./vertexSpaceConversion-NyUWx3oK.js";import"./mat3-BM-4VqQo.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DeRCSSXC.js";import"./spatialReferenceEllipsoidUtils-DTu3db9D.js";import"./computeTranslationToOriginAndRotation-F6558tPf.js";import"./projectPointToVector-BlI5xnHp.js";import"./meshVertexSpaceUtils-DzATY2hy.js";import"./MeshLocalVertexSpace-CBd8p9nX.js";import"./vec3-7_bHGPzF.js";import"./BufferView-OGCHU-EJ.js";import"./vec4-CXEzkzp6.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-CmT3VLVB.js.map
