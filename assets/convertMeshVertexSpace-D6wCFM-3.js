import{w as s,I as m,b8 as p}from"./index-DV3MVxlX.js";import{p as n}from"./MeshVertexAttributes-ChBFNsCF.js";import{B as a}from"./vertexSpaceConversion-C8xjgAYE.js";import"./mat3-C-7dTlBf.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-ClB-VmTs.js";import"./spatialReferenceEllipsoidUtils-C5NCQv-C.js";import"./computeTranslationToOriginAndRotation-DIRyJzDZ.js";import"./projectPointToVector-C-SKG8e6.js";import"./meshVertexSpaceUtils-CIAYFGZ5.js";import"./MeshLocalVertexSpace-C_G94sWN.js";import"./vec3-DaGMZWJ8.js";import"./BufferView-MtSf1gV8.js";import"./vec4-BiISY2eq.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-D6wCFM-3.js.map
