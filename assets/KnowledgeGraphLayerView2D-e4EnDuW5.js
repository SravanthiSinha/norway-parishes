import{ae as p,dE as a,j as e,m as o,dF as s,k as m}from"./index-BB6xpuj5.js";import{j as n,y as l}from"./LayerView-C9uOes3C.js";import"./utils-BQBvadb7.js";import"./Container-CzB7Zj09.js";import"./MapView-BB5zyy98.js";import"./CollectionFlattener-vw9PCdEV.js";import"./TileInfo-DckZPgmV.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-zVWkHYEv.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-DP1x1Bsi.js";import"./signal-JD86_R7M.js";import"./ColorBackground-5boBVQCV.js";import"./basemapUtils-DT7CgBiu.js";import"./utils-Dmn_mtNQ.js";import"./TablesMixin-rUkw-8tc.js";import"./Layer-5zl9d9z3.js";import"./GraphicsCollection-BlSm0Gtj.js";import"./HeightModelInfo-Cn8WVYm1.js";import"./ReactiveMap-C5xyLUPa.js";import"./a11yUtils-XrMtlS1N.js";import"./ViewingMode-dBUh39ak.js";import"./mat2df32-orApM5a3.js";import"./mat3-DJqSU6w-.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-CoC6AtxP.js";import"./Tile-CSO7o2Lx.js";import"./TileKey-bsr5k5kR.js";import"./QueueProcessor-DuXSk4nk.js";import"./quickselect-QQC62dOK.js";import"./vec32-Dn1yeTzb.js";import"./definitions-C0Jy3zs7.js";import"./enums-Dk3osxpS.js";import"./Texture-BzN5lHkh.js";import"./imageUtils-DlrOtbVu.js";import"./capabilities-A2uoe7dc.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-D95E-zHd.js";import"./GoTo-CVPsm2b2.js";import"./ZoomViewModel-CECqLXXU.js";import"./EffectView-ByR8_5fn.js";import"./parser-Bf0eM-Za.js";import"./layerViewUtils-CcnERjia.js";let r=class extends n(l){constructor(t){super(t),this.layerViews=new p}set layerViews(t){this._set("layerViews",a(t,this._get("layerViews")))}get updatingProgress(){return this.layerViews.length===0?1:this.layerViews.reduce((t,i)=>t+i.updatingProgress,0)/this.layerViews.length}attach(){this._updateStageChildren(),this.addAttachHandles(this.layerViews.on("after-changes",()=>this._updateStageChildren()))}detach(){this.container.removeAllChildren()}update(t){}viewChange(){}moveEnd(){}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((t,i)=>this.container.addChildAt(t.container,i))}};e([o({cast:s})],r.prototype,"layerViews",null),e([o({readOnly:!0})],r.prototype,"updatingProgress",null),r=e([m("esri.views.2d.layers.KnowledgeGraphLayerView2D")],r);const it=r;export{it as default};
