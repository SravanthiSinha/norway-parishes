import{w as s,I as m,b5 as p}from"./index-UqHiE_Ae.js";import{p as n}from"./MeshVertexAttributes-D5aQyF54.js";import{B as a}from"./vertexSpaceConversion-HRwKOSQT.js";import"./mat3-DBYGNwdL.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-BSCBtxXw.js";import"./spatialReferenceEllipsoidUtils-48JarwG2.js";import"./computeTranslationToOriginAndRotation-DDJVQKl1.js";import"./projectPointToVector-CadVWhZ1.js";import"./meshVertexSpaceUtils-D_rPE_bz.js";import"./MeshLocalVertexSpace-D3fjzxIC.js";import"./vec3-BYAeuya9.js";import"./BufferView-tC5Mp6Kf.js";import"./vec4-8AVGhbdI.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-M3Mzzn9n.js.map
