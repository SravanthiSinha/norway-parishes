import{dc as e,dd as c,de as n,U as u}from"./index-BMHxxDIj.js";import{a as y}from"./WebMap-O9pe7tOc.js";import"./ColorBackground-CYXW4FqY.js";import"./CollectionFlattener-BquB5e3B.js";import"./basemapUtils-BzEOQY0O.js";import"./TablesMixin-Bbku17Br.js";import"./MultiOriginJSONSupport-DZgciuSo.js";import"./portalItemUtils-Bl5bgtF1.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-Dz-P13Io.js";import"./jsonContext-ChTcqxJl.js";import"./project-8DPVy2AO.js";import"./FeatureLayer-BHnJtXVa.js";import"./commonProperties-Bp0v-5fD.js";import"./FeatureLayerBase-BSFHA-3b.js";import"./HeightModelInfo-G-qXx9lo.js";import"./featureLayerUtils-C_xJvbqY.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-EJuL-RAq.js";import"./Relationship-D-Gqvvkr.js";import"./serviceCapabilitiesUtils-CPPF4tj8.js";import"./editsZScale-BEnwQ1EU.js";import"./APIKeyMixin-DyEFyqla.js";import"./ArcGISService-ejtuaogL.js";import"./CustomParametersMixin-CJ4xOKc_.js";import"./EditBusLayer-DUb1Tla6.js";import"./FeatureEffectLayer-DF_fDVE2.js";import"./FeatureEffect-BSgEaayU.js";import"./FeatureReductionLayer-Dg_hJPpC.js";import"./FeatureReductionSelection-hf9XMvcp.js";import"./labelingInfo-JcIWibnx.js";import"./labelUtils-CXf2-pLK.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-DNsy-Vht.js";import"./OrderedLayer-DNHKsDIk.js";import"./OrderByInfo-DnPR3Ea7.js";import"./PortalLayer-NTAjoJXz.js";import"./RefreshableLayer-DmKqkx33.js";import"./TemporalLayer-jARWAAj6.js";import"./FeatureTemplate-DMZQFYl1.js";import"./FeatureType-C6XXTaOF.js";import"./fieldProperties-z3ARRbNZ.js";import"./versionUtils-BQRABJ4a.js";import"./styleUtils-DeI7D7sK.js";import"./popupUtils-ga7g3c4-.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-XUlsniGG.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-ohghvWOv.js.map
