import{db as e,dc as c,dd as n,U as u}from"./index-UqHiE_Ae.js";import{a as y}from"./WebMap-Cw-U3mUs.js";import"./ColorBackground-Bi33awfy.js";import"./CollectionFlattener-DL2lHpIM.js";import"./basemapUtils-DZ-47i8I.js";import"./TablesMixin-CfmLPAKk.js";import"./MultiOriginJSONSupport-uJ6Tf-9u.js";import"./portalItemUtils-YqLLU2TY.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-B29yilNT.js";import"./jsonContext-BL1lQHBj.js";import"./project-06OU_Y1X.js";import"./FeatureLayer-CmuP7AIj.js";import"./commonProperties-BSULNr38.js";import"./FeatureLayerBase-DEymvT6h.js";import"./HeightModelInfo-DL8_Qm8B.js";import"./featureLayerUtils-1wahS6i8.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-B6zZX_Ur.js";import"./Relationship-DFkH7xCA.js";import"./serviceCapabilitiesUtils-M8I72Qhf.js";import"./editsZScale-B99cTnUj.js";import"./APIKeyMixin-CSZY1WYi.js";import"./ArcGISService-IZJnoJkj.js";import"./CustomParametersMixin-BhLSNgdr.js";import"./EditBusLayer-Dv-Q4aT8.js";import"./FeatureEffectLayer-Bk57t1eu.js";import"./FeatureEffect-F7j3iSCm.js";import"./FeatureReductionLayer-BhFiRV79.js";import"./FeatureReductionSelection-CVor71WE.js";import"./labelingInfo-CsEvv1Fc.js";import"./labelUtils-C-asvAWO.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-SfJ_GAhf.js";import"./OrderedLayer-CHPXLzzS.js";import"./OrderByInfo-a7f8eTpS.js";import"./PortalLayer-BKZmVY15.js";import"./RefreshableLayer-CB6rqPfo.js";import"./TemporalLayer-KCrii1vS.js";import"./FeatureTemplate-DZMBHZab.js";import"./FeatureType-BWej98bO.js";import"./fieldProperties-C5BcmpPt.js";import"./versionUtils-D3kip6FZ.js";import"./styleUtils-BkEv2jZT.js";import"./popupUtils-Gqf3ZHMG.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-DC5_OOOJ.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-BML2Krcu.js.map
