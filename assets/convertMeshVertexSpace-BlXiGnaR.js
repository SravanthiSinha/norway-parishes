import{w as s,I as m,b5 as p}from"./index-oLM2nnvm.js";import{p as n}from"./MeshVertexAttributes-K9lu64Nw.js";import{B as a}from"./vertexSpaceConversion-Bg6HiDuI.js";import"./mat3-CLwqfO5w.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-CPxrCE8J.js";import"./spatialReferenceEllipsoidUtils-DNQs3HQm.js";import"./computeTranslationToOriginAndRotation-C9iXoqjE.js";import"./projectPointToVector-D2dp1OBD.js";import"./meshVertexSpaceUtils-D2vEcKoR.js";import"./MeshLocalVertexSpace-DGGyeSkp.js";import"./vec3-BN_JGfxC.js";import"./BufferView-Dyy6SCyJ.js";import"./vec4-DI74MIM5.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-BlXiGnaR.js.map
