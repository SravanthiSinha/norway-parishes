import{db as e,dc as c,dd as n,U as u}from"./index-Dqo4rVFT.js";import{a as y}from"./WebMap-rvZO45Zm.js";import"./ColorBackground-Nzyu0fAJ.js";import"./CollectionFlattener-CLmJgeo8.js";import"./basemapUtils-Dk28Ezgn.js";import"./TablesMixin-C4OWsqfi.js";import"./MultiOriginJSONSupport-BhZrGEJo.js";import"./portalItemUtils-Ac8FG-or.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-Cj6CAEOp.js";import"./jsonContext-BWXT5nwc.js";import"./project-krHwHmgy.js";import"./FeatureLayer-uw6lVSFB.js";import"./commonProperties-CIQ9XbBG.js";import"./FeatureLayerBase-Dhnuc8Ax.js";import"./HeightModelInfo-CA7Yxqkf.js";import"./featureLayerUtils-Dbb3Y-s1.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-DAjcgPnk.js";import"./Relationship-DMMA8qw0.js";import"./serviceCapabilitiesUtils-Dm0iLO1N.js";import"./editsZScale-D009Izoy.js";import"./APIKeyMixin-rkzJhRx8.js";import"./ArcGISService-53Saey6a.js";import"./CustomParametersMixin-DmOdFkEv.js";import"./EditBusLayer-CBu_hQA_.js";import"./FeatureEffectLayer-8PCc8C5-.js";import"./FeatureEffect-DS4Aqtbb.js";import"./FeatureReductionLayer-Ckdcx_vY.js";import"./FeatureReductionSelection-MD9NH0oY.js";import"./labelingInfo-D1oOCFyH.js";import"./labelUtils-fgvL7nsO.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-BV_RJk-k.js";import"./OrderedLayer-MyJ3gg3B.js";import"./OrderByInfo-DWUbpiAP.js";import"./PortalLayer-BfjXsne8.js";import"./RefreshableLayer-DB4Ria0p.js";import"./TemporalLayer-CQ2BpujV.js";import"./FeatureTemplate-aPPSlXg-.js";import"./FeatureType-Cv2b1uZs.js";import"./fieldProperties-B9S76JaL.js";import"./versionUtils-ecFqkX4R.js";import"./styleUtils-BqloVMsB.js";import"./popupUtils-DhCgpmm2.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-B4X_IITG.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-_tUid1yE.js.map
