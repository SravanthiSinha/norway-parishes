import{w as s,I as m,b7 as p}from"./index-BlakZCKi.js";import{p as n}from"./MeshVertexAttributes-CbC71Tgw.js";import{B as a}from"./vertexSpaceConversion-BD4TjfXU.js";import"./mat3-BC7N_t3a.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-zVyU2qww.js";import"./spatialReferenceEllipsoidUtils-C9F7FEe0.js";import"./computeTranslationToOriginAndRotation-BO73dyTd.js";import"./projectPointToVector-DxBUY200.js";import"./meshVertexSpaceUtils-CgBrO7NF.js";import"./MeshLocalVertexSpace-LoGfjO1l.js";import"./vec3-Dfzo9y_d.js";import"./BufferView-BNdzqkfm.js";import"./vec4-DFCOyoxn.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-D82g67jT.js.map
