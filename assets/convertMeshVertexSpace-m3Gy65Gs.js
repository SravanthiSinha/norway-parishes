import{w as s,I as m,b7 as p}from"./index-BvuY3ppR.js";import{p as n}from"./MeshVertexAttributes-DvS5FTzz.js";import{B as a}from"./vertexSpaceConversion-k7lZb2D9.js";import"./mat3-CRSfGftC.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DyxqxkTQ.js";import"./spatialReferenceEllipsoidUtils-gx-sDH_e.js";import"./computeTranslationToOriginAndRotation-NP4j1OIm.js";import"./projectPointToVector-AxxNHZou.js";import"./meshVertexSpaceUtils-BcBRz9ok.js";import"./MeshLocalVertexSpace-DMbx3ayF.js";import"./vec3-BeHH6D_D.js";import"./BufferView-CNgPDzbC.js";import"./vec4-DiVwZjRt.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-m3Gy65Gs.js.map
