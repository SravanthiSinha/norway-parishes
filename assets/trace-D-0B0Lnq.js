import{db as e,dc as c,dd as n,U as u}from"./index-BfLS464G.js";import{a as y}from"./WebMap-DEffliVq.js";import"./ColorBackground-B-aHDRbY.js";import"./CollectionFlattener-X0S8zgtM.js";import"./basemapUtils-CATGu2F4.js";import"./TablesMixin-CFytb7-C.js";import"./MultiOriginJSONSupport-BwKTB8uK.js";import"./portalItemUtils-EuqfQTt4.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-lv3vrX4Z.js";import"./jsonContext-CK1OtGbn.js";import"./project-CMwThrYg.js";import"./FeatureLayer-CDpKvV3l.js";import"./commonProperties-BYkEjETv.js";import"./FeatureLayerBase-BGV1qseJ.js";import"./HeightModelInfo-DzK0H4Qy.js";import"./featureLayerUtils-Bgc5F16E.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-D1gNlHjm.js";import"./Relationship-D4VApXlb.js";import"./serviceCapabilitiesUtils-C_-03Ql-.js";import"./editsZScale-BK19AzRt.js";import"./APIKeyMixin-CFihdbDi.js";import"./ArcGISService-BirHaw4A.js";import"./CustomParametersMixin-D4pNVDVF.js";import"./EditBusLayer-gmXab_6V.js";import"./FeatureEffectLayer-rz1La56W.js";import"./FeatureEffect-DNhvMAVm.js";import"./FeatureReductionLayer-CRQCzTpq.js";import"./FeatureReductionSelection-CwDWpKst.js";import"./labelingInfo-CULBC2Dz.js";import"./labelUtils-BlsYivSn.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-BUUpUxXC.js";import"./OrderedLayer-CTWEJHsD.js";import"./OrderByInfo-Baayvtrh.js";import"./PortalLayer-tuvCU0Ht.js";import"./RefreshableLayer-CHgQeylb.js";import"./TemporalLayer-CnKbOiyq.js";import"./FeatureTemplate-CxRsgMWf.js";import"./FeatureType-C2bGC672.js";import"./fieldProperties-D3adeTWh.js";import"./versionUtils-BzrJYu22.js";import"./styleUtils-C4RcdAhf.js";import"./popupUtils-B9Xf_bU6.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-igEAMhwY.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-D-0B0Lnq.js.map
