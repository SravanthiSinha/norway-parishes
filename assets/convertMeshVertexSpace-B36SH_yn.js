import{w as s,I as m,b7 as p}from"./index-5zHX_dwk.js";import{p as n}from"./MeshVertexAttributes-B6tjkn10.js";import{B as a}from"./vertexSpaceConversion-CQ_iNWD5.js";import"./mat3-BWDp4RJW.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DhGnS-cJ.js";import"./spatialReferenceEllipsoidUtils-BBB2aW7p.js";import"./computeTranslationToOriginAndRotation-DI5gA72p.js";import"./projectPointToVector-CudlJ0jH.js";import"./meshVertexSpaceUtils-DrCodM30.js";import"./MeshLocalVertexSpace-Beh1VKCQ.js";import"./vec3-DYPmjzuo.js";import"./BufferView-DifXvsk8.js";import"./vec4-GUlo175g.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-B36SH_yn.js.map
