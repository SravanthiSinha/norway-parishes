import{w as s,I as m,b8 as p}from"./index-Cj37dcSI.js";import{p as n}from"./MeshVertexAttributes-BWNg7ZR6.js";import{B as a}from"./vertexSpaceConversion-CrTUouhg.js";import"./mat3-B-2QwjCX.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-ClhtQEtD.js";import"./spatialReferenceEllipsoidUtils-Dk0rUpd4.js";import"./computeTranslationToOriginAndRotation-tq3GQ3yn.js";import"./projectPointToVector-DOoxDG2z.js";import"./meshVertexSpaceUtils-D4WW04DQ.js";import"./MeshLocalVertexSpace-DXExPrpE.js";import"./vec3-D-MW3v6u.js";import"./BufferView-Bl6JMOVD.js";import"./vec4-BQy3-j41.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-2Ehe2Q00.js.map
