import{w as s,I as m,b8 as p}from"./index-Vdm0PCas.js";import{p as n}from"./MeshVertexAttributes-Cz3jnKma.js";import{B as a}from"./vertexSpaceConversion-DRC_wMtF.js";import"./mat3-DkohSmiU.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Dj0jkd2Q.js";import"./spatialReferenceEllipsoidUtils-AeVm9X2Z.js";import"./computeTranslationToOriginAndRotation-l7flbkm8.js";import"./projectPointToVector-BcftPcpn.js";import"./meshVertexSpaceUtils-L4ASm5Gf.js";import"./MeshLocalVertexSpace-DJ8UqjWc.js";import"./vec3-DwHr82yV.js";import"./BufferView-DgBJkdOt.js";import"./vec4-hFFjbxtk.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-D8-lvggO.js.map
