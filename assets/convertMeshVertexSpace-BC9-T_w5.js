import{w as s,I as m,b5 as p}from"./index-CRM8otC0.js";import{p as n}from"./MeshVertexAttributes-Bl7bK74z.js";import{B as a}from"./vertexSpaceConversion-C8VMT-f6.js";import"./mat3-B77SXXrK.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-rRhbC1zp.js";import"./spatialReferenceEllipsoidUtils-B-AHBmBS.js";import"./computeTranslationToOriginAndRotation-Dxo2OeS6.js";import"./projectPointToVector-DggM3ivD.js";import"./meshVertexSpaceUtils-BEUkThyD.js";import"./MeshLocalVertexSpace-BFFEs8cg.js";import"./vec3-D8p3iL0S.js";import"./BufferView-DOmMjw__.js";import"./vec4-Cj8lYVp7.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-BC9-T_w5.js.map
