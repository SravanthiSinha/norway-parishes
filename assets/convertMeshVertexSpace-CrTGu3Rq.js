import{w as s,I as m,b8 as p}from"./index-BB6xpuj5.js";import{p as n}from"./MeshVertexAttributes--31PMRHY.js";import{B as a}from"./vertexSpaceConversion-DeR9-yvp.js";import"./mat3-DJqSU6w-.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Dn1yeTzb.js";import"./spatialReferenceEllipsoidUtils-B44YZ9ue.js";import"./computeTranslationToOriginAndRotation-o2bO_U7P.js";import"./projectPointToVector-DRvknz1p.js";import"./meshVertexSpaceUtils-1o2YkXWF.js";import"./MeshLocalVertexSpace-Cjwo5wmK.js";import"./vec3-DXQcbtuO.js";import"./BufferView-BiJ9Khrs.js";import"./vec4-B1okF54y.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
