import{w as s,I as m,b5 as p}from"./index-CJT1kG3U.js";import{p as n}from"./MeshVertexAttributes-Dn_R_ni2.js";import{B as a}from"./vertexSpaceConversion-Dq5aGwPA.js";import"./mat3-C5rmyjBz.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-BEXyJ64g.js";import"./spatialReferenceEllipsoidUtils-B61m2-OU.js";import"./computeTranslationToOriginAndRotation-Ck8WymfX.js";import"./projectPointToVector-CND_z55g.js";import"./meshVertexSpaceUtils-CFb8uanA.js";import"./MeshLocalVertexSpace-X9mqHhj2.js";import"./vec3-Bed7wTZ_.js";import"./BufferView-Ce-ToCbK.js";import"./vec4-BfpkaCPt.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-zKEwLf5u.js.map
