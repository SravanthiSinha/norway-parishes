import{w as s,I as m,b7 as p}from"./index-BLU2cKnj.js";import{p as n}from"./MeshVertexAttributes-DX9AEXYO.js";import{B as a}from"./vertexSpaceConversion-_hw4F8wp.js";import"./mat3-BSrJLg75.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-BnbgDL9n.js";import"./spatialReferenceEllipsoidUtils-DNFSQ2Xz.js";import"./computeTranslationToOriginAndRotation-DnjPedgC.js";import"./projectPointToVector-H4ZBCIj2.js";import"./meshVertexSpaceUtils-BTYojZkZ.js";import"./MeshLocalVertexSpace-BhGGi1UG.js";import"./vec3-L69o4tnQ.js";import"./BufferView-C5RmMK68.js";import"./vec4-BFL4751u.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-DFUjNWDY.js.map
