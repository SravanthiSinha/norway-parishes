import{dc as e,dd as c,de as n,U as u}from"./index-j6yFHuRy.js";import{a as y}from"./WebMap-BmR9raKS.js";import"./ColorBackground-IcvmrVJq.js";import"./CollectionFlattener-dpPPBihN.js";import"./basemapUtils-CnDMVnyg.js";import"./TablesMixin-DM7RGmGt.js";import"./MultiOriginJSONSupport-CJaKDD25.js";import"./portalItemUtils-DaLKdBuc.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-3bdrlnRg.js";import"./jsonContext-D1ZpWIye.js";import"./project-BoyiSUSs.js";import"./FeatureLayer-DV7WrnrS.js";import"./commonProperties-B1Shr_B6.js";import"./FeatureLayerBase-CQZ4TINK.js";import"./HeightModelInfo-qFT9GYXQ.js";import"./featureLayerUtils-CTzMywEW.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-DcQOjSwG.js";import"./Relationship-RFauZK3H.js";import"./serviceCapabilitiesUtils-C32buQUc.js";import"./editsZScale-SuOUdCC5.js";import"./APIKeyMixin-Dpu_lOv9.js";import"./ArcGISService-7TvQZ8Vy.js";import"./CustomParametersMixin-ioqLylSd.js";import"./EditBusLayer-Do9bj2rE.js";import"./FeatureEffectLayer--yMyY6Cu.js";import"./FeatureEffect-B3wDO_h1.js";import"./FeatureReductionLayer-Cs0bsQhr.js";import"./FeatureReductionSelection-oIgsWcVf.js";import"./labelingInfo-DqMJRRbk.js";import"./labelUtils-I7XUOAHm.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-D59xf6Bk.js";import"./OrderedLayer-MIfoyp7t.js";import"./OrderByInfo-D_oKYdWb.js";import"./PortalLayer-Qvkbh7tI.js";import"./RefreshableLayer-CFcm93ZG.js";import"./TemporalLayer-lIs7z0st.js";import"./FeatureTemplate-DzC50TqZ.js";import"./FeatureType-DyPnByMf.js";import"./fieldProperties-D6jFonwt.js";import"./versionUtils-D3T0GhGi.js";import"./styleUtils-D6agKPGj.js";import"./popupUtils-DZmJ2f8b.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-fS5GO-IG.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Bxv5Q5hb.js.map
