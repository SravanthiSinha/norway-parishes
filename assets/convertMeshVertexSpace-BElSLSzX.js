import{w as s,I as m,b8 as p}from"./index-Bs-G_wsu.js";import{p as n}from"./MeshVertexAttributes-CFZE9QZQ.js";import{B as a}from"./vertexSpaceConversion-KMfh5WD5.js";import"./mat3-CCtmvIux.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DrHtz8AR.js";import"./spatialReferenceEllipsoidUtils-CyKB2yXE.js";import"./computeTranslationToOriginAndRotation-DaEA-6J0.js";import"./projectPointToVector-CvVRkOeo.js";import"./meshVertexSpaceUtils-Br2zZLV7.js";import"./MeshLocalVertexSpace-BVQfGmj4.js";import"./vec3-BwK81hes.js";import"./BufferView-BasJWrfc.js";import"./vec4-DaiOdcnT.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
