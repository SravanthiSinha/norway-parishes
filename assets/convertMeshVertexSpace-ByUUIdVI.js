import{w as s,I as m,b8 as p}from"./index-DhfeYpQB.js";import{p as n}from"./MeshVertexAttributes-Ra8VLHTd.js";import{B as a}from"./vertexSpaceConversion-mUn3msFn.js";import"./mat3-HKyrMW62.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-hvHczjfo.js";import"./spatialReferenceEllipsoidUtils-DScxt-ju.js";import"./computeTranslationToOriginAndRotation-DooXBCgO.js";import"./projectPointToVector-CFw6Jf9w.js";import"./meshVertexSpaceUtils-_4ExorUx.js";import"./MeshLocalVertexSpace-D6sowmAc.js";import"./vec3-CoK-3x9O.js";import"./BufferView-ola1ZlyP.js";import"./vec4-Clcp-NpS.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-ByUUIdVI.js.map
