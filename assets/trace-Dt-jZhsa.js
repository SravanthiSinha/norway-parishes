import{db as e,dc as c,dd as n,U as u}from"./index-CyZqSx7I.js";import{a as y}from"./WebMap-pJd624rK.js";import"./ColorBackground-DPL1uv77.js";import"./CollectionFlattener--YLIXmQg.js";import"./basemapUtils-B5xWBuOK.js";import"./TablesMixin-Dsuypqcr.js";import"./MultiOriginJSONSupport-Dkp6reEM.js";import"./portalItemUtils-DZL-jnzT.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-6gRojqiz.js";import"./jsonContext-Ca2Ygd9z.js";import"./project-DY4Sv_qm.js";import"./FeatureLayer-Cm259dVi.js";import"./commonProperties-D3jRdA_I.js";import"./FeatureLayerBase-DoYvdCJV.js";import"./HeightModelInfo-DpB4FpSN.js";import"./featureLayerUtils-Cej-3RSv.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-BxFw77v7.js";import"./Relationship-COdKVKHP.js";import"./serviceCapabilitiesUtils-BKTrxFBc.js";import"./editsZScale-CSfFv36u.js";import"./APIKeyMixin-BGHR1LfF.js";import"./ArcGISService-BzMaLKW_.js";import"./CustomParametersMixin-DAS2X7v4.js";import"./EditBusLayer-Cr5RUN6D.js";import"./FeatureEffectLayer-D8QRTXmw.js";import"./FeatureEffect-BF-aQnfK.js";import"./FeatureReductionLayer-_haEeMFq.js";import"./FeatureReductionSelection-DijihZnu.js";import"./labelingInfo-DIOw_3eb.js";import"./labelUtils-BQ01S__V.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-CN-9hwyk.js";import"./OrderedLayer-TfenF7r2.js";import"./OrderByInfo-DwXQzY2i.js";import"./PortalLayer-CsB9XJVP.js";import"./RefreshableLayer-BHvEEOWn.js";import"./TemporalLayer-RHNxS2vb.js";import"./FeatureTemplate-BVP7KsR_.js";import"./FeatureType-bDO_Z4k4.js";import"./fieldProperties-C7elequI.js";import"./versionUtils-CLfcwT_q.js";import"./styleUtils-Dh7CaB32.js";import"./popupUtils-jbpOw5AZ.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-Csdkv2H4.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Dt-jZhsa.js.map
