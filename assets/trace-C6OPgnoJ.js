import{dc as e,dd as c,de as n,U as u}from"./index-BlakZCKi.js";import{a as y}from"./WebMap-BTnPmFuF.js";import"./ColorBackground-C7QrWvcW.js";import"./CollectionFlattener-nugv4EKT.js";import"./basemapUtils-Dtq4Jl7n.js";import"./TablesMixin-B9u2pYWE.js";import"./MultiOriginJSONSupport-Biu21mVb.js";import"./portalItemUtils-ClM50EPF.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-gyyxRcL6.js";import"./jsonContext-Dxcx9Cch.js";import"./project-DUBBcqML.js";import"./FeatureLayer-BWvHl3-3.js";import"./commonProperties-BR-qOI1C.js";import"./FeatureLayerBase-DjHIgrIg.js";import"./HeightModelInfo-CX4NXl5N.js";import"./featureLayerUtils-CMPkEx0v.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-Fu2yFAuk.js";import"./Relationship-DOS7x3sz.js";import"./serviceCapabilitiesUtils-BCRoCq2y.js";import"./editsZScale-BH4dZQwV.js";import"./APIKeyMixin-DE2kp1H3.js";import"./ArcGISService-DVWJ5Dcs.js";import"./CustomParametersMixin-B-S9eJPK.js";import"./EditBusLayer-DD2f8G0U.js";import"./FeatureEffectLayer-D6bKwPY6.js";import"./FeatureEffect-lt3g2-iR.js";import"./FeatureReductionLayer-BWx0KXvI.js";import"./FeatureReductionSelection-iYBDhXMT.js";import"./labelingInfo-0SxHbHGB.js";import"./labelUtils-C0HBd1KF.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-BOkqCWUa.js";import"./OrderedLayer-DP7gBNYc.js";import"./OrderByInfo-DBa8o2Xm.js";import"./PortalLayer-CJSsiAPi.js";import"./RefreshableLayer-6N49EI-i.js";import"./TemporalLayer-kka6caPM.js";import"./FeatureTemplate-CGgYEx9K.js";import"./FeatureType-Cma_XgtO.js";import"./fieldProperties-B_6eOQTg.js";import"./versionUtils-CRCQ7KXh.js";import"./styleUtils-DX_wCIJs.js";import"./popupUtils-umqxIrF7.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-DjPG8oIG.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-C6OPgnoJ.js.map
