import{db as e,dc as c,dd as n,U as u}from"./index-CRM8otC0.js";import{a as y}from"./WebMap-B0-a37zx.js";import"./ColorBackground-QnGkf2MC.js";import"./CollectionFlattener-Smnlsg-w.js";import"./basemapUtils-DIGbo40K.js";import"./TablesMixin-2MmYYsfl.js";import"./MultiOriginJSONSupport-BQj34yrO.js";import"./portalItemUtils-DVVTb5W5.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-DWkOMgYh.js";import"./jsonContext-BsfVE01V.js";import"./project-BuhZfOLm.js";import"./FeatureLayer-DLuKCI-S.js";import"./commonProperties-CVCJh__S.js";import"./FeatureLayerBase-C7N8lgEM.js";import"./HeightModelInfo-Cqv1ovWQ.js";import"./featureLayerUtils-aO5fX27x.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-MarFDT-Y.js";import"./Relationship-DpIUkaBv.js";import"./serviceCapabilitiesUtils-CQaLxabh.js";import"./editsZScale-FDKnvsaP.js";import"./APIKeyMixin-Bu60mLpV.js";import"./ArcGISService-CVuarsrB.js";import"./CustomParametersMixin-WTeJPSFy.js";import"./EditBusLayer-ukYAVUDj.js";import"./FeatureEffectLayer-Boxfr7fp.js";import"./FeatureEffect-Br-ucsls.js";import"./FeatureReductionLayer-u3Eu_YfL.js";import"./FeatureReductionSelection-DrCnG72E.js";import"./labelingInfo-Cfav7Q56.js";import"./labelUtils-BQXJfBAl.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-DPk4_eOU.js";import"./OrderedLayer-C-1Ykjxa.js";import"./OrderByInfo-D8Hy1VNl.js";import"./PortalLayer-BRe8QXCY.js";import"./RefreshableLayer-CrE7xPAy.js";import"./TemporalLayer-D82QiTcc.js";import"./FeatureTemplate-CEZmvHRq.js";import"./FeatureType-CL3E80Br.js";import"./fieldProperties-BLTppBuC.js";import"./versionUtils-BdyHtpX_.js";import"./styleUtils-BFez8oPt.js";import"./popupUtils-B6aGFeDJ.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-BRn_5UO2.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-BUAiuhLb.js.map
