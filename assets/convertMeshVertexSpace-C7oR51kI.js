import{w as s,I as m,b7 as p}from"./index-BMHxxDIj.js";import{p as n}from"./MeshVertexAttributes-766WdPe0.js";import{B as a}from"./vertexSpaceConversion-Dl-n8yew.js";import"./mat3-DeZjtwo_.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DdwaZZBw.js";import"./spatialReferenceEllipsoidUtils-7fQZ_jkC.js";import"./computeTranslationToOriginAndRotation-Dinvsuu8.js";import"./projectPointToVector-BkUbpTIZ.js";import"./meshVertexSpaceUtils-C_xemBWN.js";import"./MeshLocalVertexSpace-7jne_07j.js";import"./vec3-vLJ_K_pl.js";import"./BufferView-C3B50yPm.js";import"./vec4-BuW6-7Jc.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-C7oR51kI.js.map
