import{db as e,dc as c,dd as n,U as u}from"./index-D2fbPmv2.js";import{a as y}from"./WebMap-BhtvOjft.js";import"./ColorBackground-Cik_pyky.js";import"./CollectionFlattener-CqhMwHE_.js";import"./basemapUtils-DjbuSOSo.js";import"./TablesMixin-BcLnbFXT.js";import"./MultiOriginJSONSupport-CiWwiGwF.js";import"./portalItemUtils-CSjrXciv.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-L4LVijOt.js";import"./jsonContext-BypIdMOa.js";import"./project-CM04MxmI.js";import"./FeatureLayer-Cg4Vgo3u.js";import"./commonProperties-ChaS5GS0.js";import"./FeatureLayerBase-BPGNB2iI.js";import"./HeightModelInfo-CjsnL3DZ.js";import"./featureLayerUtils-BtbQaBiM.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-BiEEzrkH.js";import"./Relationship-27oMYSmz.js";import"./serviceCapabilitiesUtils-BAOd9OXC.js";import"./editsZScale-iDmUiXZ8.js";import"./APIKeyMixin-CajJ21HV.js";import"./ArcGISService-CaAm5zrR.js";import"./CustomParametersMixin-BL7lOS1M.js";import"./EditBusLayer-FZrvniEK.js";import"./FeatureEffectLayer-CZw_HTcm.js";import"./FeatureEffect-Czq-c2-6.js";import"./FeatureReductionLayer-DzjlsWq3.js";import"./FeatureReductionSelection-BgSaOl63.js";import"./labelingInfo-CDqcuavl.js";import"./labelUtils-CrPVFGbX.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-OfS7ofUf.js";import"./OrderedLayer-vvdHsric.js";import"./OrderByInfo-Bn_veDWs.js";import"./PortalLayer-CvjKt5oM.js";import"./RefreshableLayer-CStq_Naj.js";import"./TemporalLayer-DsJdvu2C.js";import"./FeatureTemplate-2QHHDR2S.js";import"./FeatureType-rV34jsVE.js";import"./fieldProperties-DwX3a7Tw.js";import"./versionUtils-B64gp-CJ.js";import"./styleUtils-B6is7UMm.js";import"./popupUtils-DKk4nxaP.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-CgWTEwLL.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-zetJnYu3.js.map
