import{dc as e,dd as c,de as n,U as u}from"./index-BvuY3ppR.js";import{a as y}from"./WebMap-BO4SF9qF.js";import"./ColorBackground-Brvkjxqj.js";import"./CollectionFlattener-QrvHNFlP.js";import"./basemapUtils-HuBwIz9_.js";import"./TablesMixin-Dzvwj3m3.js";import"./MultiOriginJSONSupport-qT6YbIui.js";import"./portalItemUtils-CuT7pXs4.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-CZamNl-W.js";import"./jsonContext-BUfiYo8A.js";import"./project-CgZrk8U9.js";import"./FeatureLayer-CUWElQl-.js";import"./commonProperties-DPaToaxC.js";import"./FeatureLayerBase-BwFTkdV7.js";import"./HeightModelInfo-CN8OWJiA.js";import"./featureLayerUtils-CKSU1ldu.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-Yv77SVQR.js";import"./Relationship-BpbiUpxD.js";import"./serviceCapabilitiesUtils-DJpk8apz.js";import"./editsZScale-2QvHdO-L.js";import"./APIKeyMixin-C6qZkXmd.js";import"./ArcGISService-C0RXsBSE.js";import"./CustomParametersMixin-D0gtZkrL.js";import"./EditBusLayer-DzLN5ELJ.js";import"./FeatureEffectLayer-Kc8H8Tfp.js";import"./FeatureEffect-DMiM48V5.js";import"./FeatureReductionLayer-BtpQ8PjS.js";import"./FeatureReductionSelection-CjAo8zOe.js";import"./labelingInfo-C4KG-2j9.js";import"./labelUtils-BTgJgVoP.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-DypT4zYj.js";import"./OrderedLayer-BHaIYW01.js";import"./OrderByInfo-CNn0RTml.js";import"./PortalLayer-BIVieGhj.js";import"./RefreshableLayer-SGfQCDWe.js";import"./TemporalLayer-DKvPriGR.js";import"./FeatureTemplate-BnLGapc-.js";import"./FeatureType-CAtlLwrj.js";import"./fieldProperties-BiNIv32u.js";import"./versionUtils-ClYov0oe.js";import"./styleUtils-EB46Fgb3.js";import"./popupUtils-BiP7BDlO.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-vcsoVDVY.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Bx0gBK7e.js.map
