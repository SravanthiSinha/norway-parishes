import{w as s,I as m,b7 as p}from"./index-DbNmBX4d.js";import{p as n}from"./MeshVertexAttributes-Vj8UA1bY.js";import{B as a}from"./vertexSpaceConversion-Bq0ZJ1GN.js";import"./mat3-Do75vOmA.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-CK6Gx5ur.js";import"./spatialReferenceEllipsoidUtils-DyHaMVyv.js";import"./computeTranslationToOriginAndRotation-CXiGNcZq.js";import"./projectPointToVector-BfillUwd.js";import"./meshVertexSpaceUtils-CHvEdM6Y.js";import"./MeshLocalVertexSpace-B9iXi92s.js";import"./vec3-DU78_sWb.js";import"./BufferView-D9lUU5RA.js";import"./vec4-C0iK3SKL.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-CMcoUgHu.js.map
