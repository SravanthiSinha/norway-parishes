import{w as s,I as m,b7 as p}from"./index-U3f91iFJ.js";import{p as n}from"./MeshVertexAttributes-9YR5RHiq.js";import{B as a}from"./vertexSpaceConversion-ButY7Nh9.js";import"./mat3-DH4oy_om.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Cd65lPdo.js";import"./spatialReferenceEllipsoidUtils-DJnV5RMV.js";import"./computeTranslationToOriginAndRotation-CrWgteSQ.js";import"./projectPointToVector-azKN3URx.js";import"./meshVertexSpaceUtils-ChPgJroU.js";import"./MeshLocalVertexSpace-C7Vs-ciZ.js";import"./vec3-CZfvZBMN.js";import"./BufferView-DpHoUw6S.js";import"./vec4-Cld_mZvT.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-Cn7XszPS.js.map
