import{db as m,dd as d,dc as n,U as l,I as f}from"./index-Bs-G_wsu.js";import{i as k}from"./WebMap-DEMoRMBh.js";import"./ColorBackground-CCzJQZw-.js";import"./CollectionFlattener-CTw_eXOA.js";import"./basemapUtils-RODjC3R-.js";import"./utils-DzB8n6BG.js";import"./TablesMixin-D5Abru63.js";import"./Layer-BD5fEEcE.js";import"./MultiOriginJSONSupport-BBxe_F7T.js";import"./portalItemUtils-DwiXoV8_.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-BCZiCiBo.js";import"./jsonContext-BDIn9Amg.js";import"./project-icRd-hca.js";import"./FeatureLayer-DqQYisns.js";import"./commonProperties-D2JZeGzF.js";import"./ElevationInfo-Ogo5JfE3.js";import"./FeatureLayerBase-DxFxosgr.js";import"./HeightModelInfo-DY5GmORu.js";import"./featureLayerUtils-B9lP5GlN.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-D23a2fZQ.js";import"./Relationship-C-cZFGat.js";import"./serviceCapabilitiesUtils-GEj5uSHc.js";import"./editsZScale-8PMy8JU4.js";import"./APIKeyMixin-DWFWR-Vn.js";import"./ArcGISService-Dhi-DofJ.js";import"./BlendLayer-BeHYTX5Y.js";import"./jsonUtils-qHdUfL9L.js";import"./parser-DP7rDSW3.js";import"./CustomParametersMixin-Y8anAD7D.js";import"./EditBusLayer-BZlckobr.js";import"./FeatureEffectLayer-CFhteKe0.js";import"./FeatureEffect-27mWUEtN.js";import"./FeatureReductionLayer-C4ahZQSV.js";import"./FeatureReductionSelection-QQOJQw4A.js";import"./labelingInfo-Qff1pGsE.js";import"./labelUtils-BPgYl1Yw.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-okMj1Nle.js";import"./OrderedLayer-BJsCVehV.js";import"./OrderByInfo-Dttd1GVs.js";import"./PortalLayer-DHH3dWZi.js";import"./RefreshableLayer-BAKri3Ps.js";import"./ScaleRangeLayer-DoKtR3vt.js";import"./TemporalLayer-Byau-JSW.js";import"./FeatureTemplate-BJHAfJZ2.js";import"./FeatureType-rnXSbOXM.js";import"./fieldProperties-CwoNl49C.js";import"./versionUtils-DuQ7RKEy.js";import"./styleUtils-CplkOwlh.js";import"./popupUtils-Cu6PoQ9J.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-DrdCd9jQ.js";async function wt(i,t,a){const r=m(i),e=t.toJSON();t.validationSet&&(e.validationSet=JSON.stringify(t.validationSet));const p={...e,returnEdits:!0,f:"json"},s=d({...r.query,...p}),o=n(s,{...a,method:"post"}),c=`${r.path}/validateNetworkTopology`,{data:u}=await l(c,o);return k.fromJSON(v(u))}async function yt(i,t,a){if(!t.gdbVersion)throw new f("submit-validate-network-topology-job:missing-gdb-version","version is missing");const r=m(i),e=t.toJSON();t.validationSet&&(e.validationSet=JSON.stringify(t.validationSet));const p=n(r.query,{query:d({...e,returnEdits:!0,async:!0,f:"json"}),...a,method:"post"}),s=`${r.path}/validateNetworkTopology`,{data:o}=await l(s,p);return o?o.statusUrl:null}function v(i){return i.serviceEdits&&(i.serviceEdits=i.serviceEdits.map(t=>(t.editedFeatures.spatialReference&&(t.editedFeatures.spatialReference={wkid:t.editedFeatures.spatialReference.wkid,wkt:t.editedFeatures.spatialReference.wkt,wkt2:t.editedFeatures.spatialReference.wkt2,latestWkid:t.editedFeatures.spatialReference.latestWkid,latestVcsWkid:t.editedFeatures.spatialReference.latestVcsWkid,vcsWkid:t.editedFeatures.spatialReference.vcsWkid}),t={layerId:t.id,editedFeatures:t.editedFeatures}))),i}export{v as handleValidateNetworkTopologyResult,yt as submitValidateNetworkTopologyJob,wt as validateNetworkTopology};
