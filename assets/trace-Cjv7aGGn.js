import{dc as e,dd as c,de as n,U as u}from"./index-DbNmBX4d.js";import{a as y}from"./WebMap-Y1eww3at.js";import"./ColorBackground-DJ9LUBkO.js";import"./CollectionFlattener-f8QjlotR.js";import"./basemapUtils-D2ovKVE_.js";import"./TablesMixin-DM0BtXa2.js";import"./MultiOriginJSONSupport-B-yfrvsf.js";import"./portalItemUtils-BqSNPU_4.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-BWNqizDz.js";import"./jsonContext-C6HlqKdQ.js";import"./project-dxPanrdl.js";import"./FeatureLayer-DS_8gZka.js";import"./commonProperties-CGuThAML.js";import"./FeatureLayerBase-_2ky0iJK.js";import"./HeightModelInfo-C0ub-TTd.js";import"./featureLayerUtils-Bi22yTwR.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-CaDhQ13a.js";import"./Relationship-BbHEzW7a.js";import"./serviceCapabilitiesUtils-zIMP847t.js";import"./editsZScale-DZUJrfn7.js";import"./APIKeyMixin-CXlWrzlh.js";import"./ArcGISService-CSV0jb9-.js";import"./CustomParametersMixin-CTrVGLLT.js";import"./EditBusLayer-Z9Kr3cmv.js";import"./FeatureEffectLayer-WpwFKfa7.js";import"./FeatureEffect-DmRrP0eE.js";import"./FeatureReductionLayer-C5VCIS3_.js";import"./FeatureReductionSelection-CLrQGUM9.js";import"./labelingInfo-FimPvlW3.js";import"./labelUtils-D4Z-URWW.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-BqKvdtee.js";import"./OrderedLayer-BxwxFK4a.js";import"./OrderByInfo-B2POnA3F.js";import"./PortalLayer-hGfufuVG.js";import"./RefreshableLayer-CGuxfevt.js";import"./TemporalLayer-BFUu-J79.js";import"./FeatureTemplate-h1_gjiLZ.js";import"./FeatureType-mmVVrelu.js";import"./fieldProperties-BisedSGo.js";import"./versionUtils-03-p73ku.js";import"./styleUtils-YtuMlLaM.js";import"./popupUtils-Cj-AZhjO.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-xemfa5ne.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Cjv7aGGn.js.map
