import{w as s,I as m,b5 as p}from"./index-vxzybAz5.js";import{p as n}from"./MeshVertexAttributes-CrJTUTCU.js";import{B as a}from"./vertexSpaceConversion-DmiYtTUk.js";import"./mat3-Cv17DtVQ.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DTc6Zn5m.js";import"./spatialReferenceEllipsoidUtils-yqN7hDMV.js";import"./computeTranslationToOriginAndRotation-unJKVApm.js";import"./projectPointToVector-gouva9dZ.js";import"./meshVertexSpaceUtils-CgvKde6F.js";import"./MeshLocalVertexSpace-D1sRs7Dc.js";import"./vec3-BDXeoNGV.js";import"./BufferView-Cl2Ii5Az.js";import"./vec4-BLq_-1Qo.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-C6OF3jtB.js.map
